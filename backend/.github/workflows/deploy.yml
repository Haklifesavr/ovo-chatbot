name: Deploy to GAE

# Controls when the workflow will run
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    name: Deploying to Google Cloud
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.DB_NAME}}
      DB_USER: ${{ secrets.DB_USER}}
      DB_PWD: ${{ secrets.DB_PWD}}
      DB_HOST: ${{ secrets.DB_HOST}}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY}}
      PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT}}
      PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME}}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY}}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      ELASTIC_USERNAME: ${{ secrets.ELASTIC_USERNAME }}
      ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
      ELASTIC_HOSTS: ${{ secrets.ELASTIC_HOSTS }}
      PORT: 8080
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Creating Runtime .env and add service-account-key
      run: |
        touch .env
        echo  DB_NAME="${{ secrets.DB_NAME }}" >> .env
        echo  DB_USER="${{ secrets.DB_USER }}" >> .env
        echo  DB_PWD="${{ secrets.DB_PWD }}" >> .env
        echo  DB_HOST="${{ secrets.DB_HOST }}" >> .env
        echo  DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        echo  BUCKET="${{ secrets.BUCKET }}" >> .env
        echo  ELASTIC_USERNAME="${{ secrets.ELASTIC_USERNAME }}" >> .env
        echo  ELASTIC_PASSWORD="${{ secrets.ELASTIC_PASSWORD }}" >> .env
        echo  ELASTIC_HOSTS="${{ secrets.ELASTIC_HOSTS }}" >> .env
        echo  OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" >> .env

    # - name: Set up Python
    #   uses: actions/setup-python@v2
    #   with:
    #     python-version: 3.9

    - name: Connect to gcloud
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.GCLOUD_PROJECTID }}
        service_account_key: ${{ secrets.GCLOUD_APP_DEPLOYER_ACCOUNT}}
        export_default_credentials: true

    - name: Listing gcloud configurations
      run: gcloud config list     

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: gcr.io/${{ secrets.GCLOUD_PROJECTID }}/ovo-chatbot-backend


    - name: Deploy to Cloud Run
      run: gcloud run deploy ovo-chatbot-backend --image gcr.io/${{ secrets.GCLOUD_PROJECTID }}/ovo-chatbot-backend --platform managed --project=${{ secrets.GCLOUD_PROJECTID }} --allow-unauthenticated --region us-central1

    - name: Delete previous images
      run: |
        images=$(gcloud container images list-tags gcr.io/${{ secrets.GCLOUD_PROJECTID }}/ovo-chatbot-backend --format='get(digest)')
        images_array=()
        while IFS= read -r line; do
          images_array+=("$line")
        done <<< "$images"
        for (( i=1; i<${#images_array[@]}; i++ ))
        do
          gcloud container images delete gcr.io/${{ secrets.GCLOUD_PROJECTID }}/ovo-chatbot-backend@${images_array[i]} --force-delete-tags --quiet
        done


    # - name: Deploy to App Engine
    #   run: gcloud app deploy --image-url=gcr.io/${{ secrets.GCLOUD_PROJECTID }}/ovo-chatbot-backend --version v1 --quiet


    # steps:
    # - name: Checkout
    #   uses: actions/checkout@v2
    # - name: Creating Runtime .env and add service-account-key
    #   run: |
    #     touch .env
    #     echo  DB_NAME="${{ secrets.DB_NAME }}" >> .env
    #     echo  DB_USER="${{ secrets.DB_USER }}" >> .env
    #     echo  DB_PWD="${{ secrets.DB_PWD }}" >> .env
    #     echo  DB_HOST="${{ secrets.DB_HOST }}" >> .env
    #     echo  DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" >> .env
    #     echo  BUCKET="${{ secrets.BUCKET }}" >> .env

    # - name: Setup python 3.8
    #   uses: actions/setup-python@v2
    #   with:
    #    python-version: "3.8"
    # - name: Install Requirements
    #   run: pip install -r requirements.txt 


    # - name: Connect to gcloud
    #   uses: google-github-actions/setup-gcloud@v0
    #   with:
    #     project_id: ${{ secrets.GCLOUD_PROJECTID }}
    #     service_account_key: ${{ secrets.GCLOUD_APP_DEPLOYER_ACCOUNT}}
    #     export_default_credentials: true


    # - name: Get Cloud SQL Proxy
    #   run: |
    #     wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
    #     chmod +x cloud_sql_proxy
    # - name: Gather Static Files
    #   run: ./cloud_sql_proxy -instances=dashboarding-359510:us-east1:dashboarding-main=tcp:5432 & python manage.py collectstatic --noinput


    # # - name: Run Migrations
    # #   run: |
    # #       python manage.py makemigrations
    # #       python manage.py migrate

    # - name: Deploy to App Engine
    #   id: deploy
    #   uses: google-github-actions/deploy-appengine@v0.2.0
    #   with:
    #     deliverables: app.yaml
    #     version: v1
    #     project_id: ${{ secrets.GCLOUD_PROJECTID }}
    #     credentials: ${{ secrets.GCLOUD_APP_DEPLOYER_ACCOUNT }}